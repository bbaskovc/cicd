name: Cppcheck Workflow

on:
  workflow_call:
    inputs:
      test_dir:
        description: 'Directory containing the tests'
        required: true
        type: string
      project_name:
        description: 'Project name (if known, otherwise extracted from CMake)'
        required: true
        type: string
      cmake_options:
        description: 'Additional options for CMake configuration'
        required: false
        default: '-DCMAKE_EXPORT_COMPILE_COMMANDS=TRUE -DCOVERAGE=ON'
        type: string

jobs:
  workflow:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        submodules: recursive
        
    - name: Set up GitHub authentication
      run: |
        git config --global user.name "${{ github.actor }}"
        git config --global user.email "${{ github.actor }}@users.noreply.github.com"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Fetch all branches and initialize submodules
      run: |
        git fetch --all
        git submodule update --init --recursive

    - name: Install cppcheck
      run: command -v cppcheck >/dev/null 2>&1 || sudo apt install -y cppcheck
        
    - name: Ready Environment
      run: mkdir -p artifacts/cppcheck artifacts/html artifacts/build

    - name: Configure CMake
      run: |
        cmake -S ${{ inputs.test_dir }} -B build ${{ inputs.cmake_options }}
        cp build/compile_commands.json artifacts/build
        cp build/CMakeCache.txt artifacts/build 
   
    - name: Run Cppcheck (xml)
      run: |
        cppcheck --suppress=missingIncludeSystem --enable=all --inconclusive --project=build/compile_commands.json --xml 2> cppcheck.xml
        cp cppcheck.xml artifacts/cppcheck

    - name: Run Cppcheck (sast)
      run: | 
        cppcheck --suppress=missingIncludeSystem --enable=all --inconclusive --project=build/compile_commands.json --xml 2> cppcheck.sast 
        cp cppcheck.sast artifacts/cppcheck

    - name: Run Cppcheck (html)
      run: |
        cppcheck-htmlreport --file=cppcheck.xml --report-dir=cppcheck-html --source-dir=
        RESULT=$?; [ $RESULT -ne 0 ] && { echo "Cppcheck detected errors while running."; exit $RESULT; }
        cp -r cppcheck-html/* artifacts/html  
        grep -q 'severity="error"' cppcheck.xml && { echo "Cppcheck detected errors with severity 'error'."; exit 1; }
        exit 0;

    - name: Delete test branch
      if: always()
      run: |
        git checkout main
        git branch -D test/cppcheck
        git push origin --delete test/cppcheck

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name:  ${{ inputs.project_name }}
        path: artifacts/
        if-no-files-found: error
        retention-days: 30
